from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
import aiohttp
import asyncio
import os

BOT_TOKEN = os.getenv("BOT_TOKEN") or "7863135976:AAGlQmvWoPPqKtb9kn6WjgiL96AG0a8EFkw"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

UID_COUNTER = {}

@dp.message(CommandStart(deep_link=True))
async def activate_command(msg, command: CommandStart):
    code = command.args
    async with aiohttp.ClientSession() as session:
        async with session.get(
            "http://elevenx.onrender.com/ZJEfYIMk_activate_key",
            params={"code": code}
        ) as resp:
            res = await resp.json()
    if res.get("success"):
        key = res["key"]
        await msg.answer(f"üîë –ö–ª—é—á –≤—ã–¥–∞–Ω: <code>{key}</code>", parse_mode=ParseMode.HTML)
    else:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")

@dp.message(CommandStart())
async def start(msg):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ÑπÔ∏è–û –ú–∞–≥–∞–∑–∏–Ω–µ", callback_data="about")
    kb.button(text="‚ú®–ú–æ—è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")
    kb.button(text="üë§–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ eLevenX Shop!", reply_markup=kb.as_markup())
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

@dp.callback_query(F.data == "about")
async def about(call):
    await call.message.edit_text(
        "‚ú® –û –º–∞–≥–∞–∑–∏–Ω–µ\n\n"
        "eLevenX ‚Äì –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ DLC –¥–ª—è Standoff 2\n"
        "–í DLC –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π.\n"
        "–° –Ω–∞—à–∏–º DLC –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã, –Ω–µ –±–æ—è—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.\n"
        "–ë—ã—Å—Ç—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã.\n"
        "–í–∞–∂–Ω–æ! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DLC –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä—É—Ç-–ø—Ä–∞–≤–∞!\n\n"
        "üíé –ù–∞—à Telegram –∫–∞–Ω–∞–ª: https://t.me/elevenx8"
    )
    await call.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏

@dp.callback_query(F.data == "profile")
async def profile(call):
    uid = UID_COUNTER.get(call.from_user.id)
    if uid is None:
        uid = len(UID_COUNTER) + 1
        UID_COUNTER[call.from_user.id] = uid
    await call.message.edit_text(
        f"‚ú® –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"–ò–º—è: {call.from_user.full_name}\n"
        f"Telegram ID: {call.from_user.id}\n"
        f"UID –≤ –±–æ—Ç–µ: {uid}\n"
        f"–°—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ: {'–ü–ª–∞—Ç–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫' if call.from_user.id in UID_COUNTER else '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏'}"
    )
    await call.answer()

@dp.callback_query(F.data == "subscription")
async def subscription(call):
    user_id = call.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(
            "https://elevenx.onrender.com//moASnrwD_get_key_info",
            params={"key": f"UID_{user_id}"}
        ) as resp:
            data = await resp.json()
    if not data.get("found", False):
        await call.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —É @hexwound")
    else:
        await call.message.edit_text(
            f"üîë –ö–ª—é—á: {data['key']}\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['hwid']}\n"
            f"üõ°Ô∏è –°—Ç–∞—Ç—É—Å DLC: {data['dlc_status']}\n\n"
            f"‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å DLC –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —É @hexwound"
        )
    await call.answer()

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
